{
	"info": {
		"_postman_id": "56456d1e-c3d4-478e-8c80-30556624517b",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27318011",
		"_collection_link": "https://www.postman.com/vinodhwl/workspace/automation-testing/collection/27318011-56456d1e-c3d4-478e-8c80-30556624517b?action=share&source=collection_link&creator=27318011"
	},
	"item": [
		{
			"name": "Add Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Assertions Validations - Response",
							"",
							"const jsonData = pm.response.json();",
							"console.log(jsonData);",
							"console.log(jsonData.ID);",
							"const bookID = jsonData.ID;",
							"pm.environment.set(\"book_id\", bookID);",
							"",
							"pm.test(\"Validate Status cide is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"    pm.expect(jsonData).have.property(\"Msg\");",
							"    pm.expect(jsonData.Msg).to.eql(\"successfully added\"); ",
							"});",
							"",
							"pm.test(\"Headers Cookies Responsetime Validations\", function(){",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql",
							"    (\"application/json;charset=UTF-8\");",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//HWL333",
							"",
							"const code = pm.globals.get(\"companyCode\");",
							"const val = pm.variables.replaceIn('{{$randomInt}}');",
							"pm.collectionVariables.set(\"isbn\", code + val);",
							"pm.collectionVariables.set(\"author_name\", \"Vinod\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n\"name\":\"Learn Dart and Flutter\",\n\"isbn\":\"{{isbn}}\",\n\"aisle\":\"333\",\n\"author\":\"{{author_Name}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getBookResposne = pm.response.json();",
							"const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": [",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"book_name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"isbn\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"aisle\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"author\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"book_name\",",
							"        \"isbn\",",
							"        \"aisle\",",
							"        \"author\"",
							"      ]",
							"    }",
							"  ]",
							"}",
							"",
							"",
							"pm.test(\"Validate the Json Response Logic\", function(){",
							"    console.log(getBookResposne);",
							"    pm.expect(getBookResposne[0].author).to.eql(pm.collectionVariables.get",
							"    (\"author_Name\"));",
							"});",
							"",
							"pm.test(\"Validate the JSON Response Schema\", function(){",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonSchema(schema);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"msg\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"msg\"",
							"  ]",
							"}",
							"",
							"pm.test(\"Validate the JSON Response Code\", function(){",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonSchema(schema);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ID\" : \"{{book_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": ""
		}
	]
}